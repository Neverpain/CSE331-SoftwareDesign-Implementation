## CSE 331 hw-graph Part 2 Questions

NOTE: This file is used as part of hw-graph-part2, and is not due as part of the hw-graph-part1
submission. You may leave it blank for hw-graph-part1.

## Part 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of nodes and a collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of nodes, whether there 
       is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

A collection of nodes and a collection of edges:
   An advantage of this Graph representation is 0(1) time complexity to add a new node
   or a new edge to either collections.
   A disadvantage of this Graph representation is the ease of implementation since
   one would have to create code to connect nodes to their edges when the other
   representations include them.

An adjacency list, in which each node is associated with a list of its outgoing edges:
   An advantage of this Graph representation is 0(1) time complexity to add a new node.
   A disadvantage of this Graph representation is 0(n + e) time complexity for removing
   a node, with n being the total number of nodes and e being the total number of edges.

An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of nodes, whether there
is a link from A to B, and how many:
   An advantage of this Graph representation is 0(1) time complexity for searching for the
   number of edges because you can use A and B to find edgesOf[A][B].
   A disadvantage of this Graph representation is 0(n^2) time complexity for removing a node, w
   ith n being the number of nodes in the array.




2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

I chose a hashmap representation of the graph with the "keys" being nodes and the "values" being
a set of an object I created, LabeledEdge, which includes the node it is going towards and a
label as fields.
An advantage of this Graph representation is 0(1) time complexity for searching if the graph
contains a node.
A disadvantage of this Graph representation is the ease of implementation where I would have
to create a new class to represent the LabeledEdges.




## Part 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.

I feel that most of my original tests alone are sufficient because they cover all special cases
and the details of the specifications. They test common special cases where something,
such as the graph object or parameters, is empty or null. I also applied the (0, 1, 2) hint to my test to
cover the > 0 subdomain (can't have negative amount of nodes) multiple times. Furthermore,
I tested the parameters of my methods using the (0, 1, 2) test as well as reversing the parameters of some
of my methods, such as connectedNodes, to see that it works properly both ways. My tests also
keep in mind the representation of the graph and its expected behaviors.

I revised some of my tests to fit some changes in specifications and split some tests up to test
the same thing on multiple graphs. I did this to show that the behavior stays consistent.

2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.

I made some changes to my specifications such as the listChildren method, applying a throw to
some of my methods that had special requires specifications, and deleting my VertexNode ADT to
hold each vertex. I deleted the VertexNode ADT from my graph specification because it was more
simple to just use a String, since a node is essentially just a String. I made some of my
methods throw an exception if an uncommon requirement, such as the graph size has to be greater
than 1 or the graph must contain the nodes parameters, was not held because a client can't
easily know that. I changed my listChildren method, so it returns the outgoing edges
rather than the nodes to be able to use it for the ListChildren method in the GraphTestDriver.



